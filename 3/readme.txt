سوال : دوتا ماتریس بولی از ورودی گرفته و بررسی کند آیا وست و رسند آن ها قابل محاسبه هست  و در صورت قابل محاسبه بودن در خروجی چاپ کند:




بخش اول: آماده‌سازی 
در این بخش، ما دو جدول (ماتریس) را آماده می‌کنیم تا بتوانیم با آنها کار کنیم.

a = [[0, 1, 0], [1, 0, 1]]: اینجا اولین جدول ما با نام a ساخته می‌شود. این جدول دو سطر و سه ستون دارد و خانه‌هایش با اعداد ۰ و ۱ پر شده‌اند.

b = [[1, 1, 0], [0, 1, 0], [1, 0, 1]]: این هم دومین جدول ماست با نام b. این جدول سه سطر و سه ستون دارد.

rows_a = len(a) و cols_a = len(a[0]): اینجا با استفاده از یک دستور جادویی (len) تعداد سطرها و ستون‌های جدول a را پیدا می‌کنیم. برای جدول a، تعداد سطرها (rows_a) برابر با ۲ و تعداد ستون‌ها (cols_a) برابر با ۳ است.

rows_b = len(b) و cols_b = len(b[0]): همین کار را برای جدول b انجام می‌دهیم. تعداد سطرها (rows_b) برابر ۳ و تعداد ستون‌ها (cols_b) برابر ۳ است.

بخش دوم: محاسبه "وست" (Join) 
این بخش مثل یک بازی جمع کردن است! در جبر بولی، "وست" یا join مثل یک جمع است که از قانون "یا" (or) پیروی می‌کند. برای اینکه این جمع انجام شود، دو جدول باید کاملاً شبیه هم باشند (تعداد سطرها و ستون‌هایشان برابر باشد).

if rows_a == rows_b and cols_a == cols_b:: اینجا کد بررسی می‌کند که آیا تعداد سطرها و ستون‌های دو جدول a و b برابر است؟ در مثال ما، تعداد سطرهای a (که ۲ است) با تعداد سطرهای b (که ۳ است) برابر نیست، پس این شرط درست نیست و برنامه به بخش else می‌رود.

print("وست (join) قابل محاسبه نیست..."): چون شرط بالا درست نبود، این پیغام چاپ می‌شود.

بخش سوم: محاسبه "رسند" (Meet) 
این بخش مثل یک بازی ضرب است! در جبر بولی، "رسند" یا meet مثل یک ضرب است که از قانون "و" (and) و "یا" (or) پیروی می‌کند. برای اینکه این ضرب انجام شود، باید تعداد ستون‌های جدول اول با تعداد سطرهای جدول دوم برابر باشد.

if cols_a == rows_b:: اینجا کد بررسی می‌کند که آیا تعداد ستون‌های جدول a (cols_a که ۳ است) با تعداد سطرهای جدول b (rows_b که ۳ است) برابر است؟ چون هر دو ۳ هستند، این شرط درست است و برنامه وارد این بخش می‌شود.

print("رسند (meet) قابل محاسبه است."): این پیغام چاپ می‌شود تا نشان دهد که می‌توانیم عملیات را انجام دهیم.

meet_result = []: اینجا یک جدول خالی به نام meet_result می‌سازیم تا نتیجه ضرب را در آن قرار دهیم.

حلقه‌های تکرار:

for x in range(rows_a): و for y in range(cols_b):: این دو حلقه باعث می‌شوند که کد ما به هر خانه در جدول جدید برسد.

result = 0: یک خانه خالی برای نتیجه می‌سازیم.

for z in range(cols_a):: این حلقه سوم، مثل یک ماشین حساب کوچک است که عملیات ضرب بولی را انجام می‌دهد. این ماشین حساب، هر خانه از سطر x در جدول a را با هر خانه از ستون y در جدول b ضرب می‌کند (با استفاده از and) و سپس نتایج را با هم جمع می‌کند (با استفاده از or).

result = result or (a[x][z] and b[z][y]): این خط، جادوی اصلی را انجام می‌دهد. ابتدا a[x][z] and b[z][y] را حساب می‌کند (مثل ضرب)، سپس نتیجه را با result قبلی "یا" می‌کند (مثل جمع).

در نهایت، بعد از اینکه تمام محاسبات تمام شد، نتیجه را در meet_result قرار می‌دهد و آن را چاپ می‌کند.

else:: اگر تعداد ستون‌های جدول اول با سطرهای جدول دوم برابر نبود، این پیغام چاپ می‌شود که "رسند (meet) قابل محاسبه نیست."

این کد به صورت خودکار ابعاد جدول‌های ورودی را بررسی کرده و در صورت امکان، عملیات مورد نظر را انجام می‌دهد و نتیجه را به شما نشان می‌دهد.